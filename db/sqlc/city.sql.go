// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: city.sql

package db

import (
	"context"
)

const createCity = `-- name: CreateCity :one
INSERT INTO city (
  city_name
) VALUES (
  $1
) RETURNING id, city_name, created_at
`

func (q *Queries) CreateCity(ctx context.Context, cityName string) (City, error) {
	row := q.db.QueryRowContext(ctx, createCity, cityName)
	var i City
	err := row.Scan(&i.ID, &i.CityName, &i.CreatedAt)
	return i, err
}

const deleteCity = `-- name: DeleteCity :exec
DELETE FROM city WHERE id = $1
`

func (q *Queries) DeleteCity(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCity, id)
	return err
}

const getCity = `-- name: GetCity :one
SELECT id, city_name, created_at FROM city
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCity(ctx context.Context, id int64) (City, error) {
	row := q.db.QueryRowContext(ctx, getCity, id)
	var i City
	err := row.Scan(&i.ID, &i.CityName, &i.CreatedAt)
	return i, err
}

const listCities = `-- name: ListCities :many
SELECT id, city_name, created_at FROM city
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListCitiesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCities(ctx context.Context, arg ListCitiesParams) ([]City, error) {
	rows, err := q.db.QueryContext(ctx, listCities, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []City{}
	for rows.Next() {
		var i City
		if err := rows.Scan(&i.ID, &i.CityName, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCity = `-- name: UpdateCity :one
UPDATE city
SET city_name = $2
WHERE id = $1
RETURNING id, city_name, created_at
`

type UpdateCityParams struct {
	ID       int64  `json:"id"`
	CityName string `json:"city_name"`
}

func (q *Queries) UpdateCity(ctx context.Context, arg UpdateCityParams) (City, error) {
	row := q.db.QueryRowContext(ctx, updateCity, arg.ID, arg.CityName)
	var i City
	err := row.Scan(&i.ID, &i.CityName, &i.CreatedAt)
	return i, err
}

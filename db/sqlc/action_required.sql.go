// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: action_required.sql

package db

import (
	"context"
	"database/sql"
)

const createActionRequired = `-- name: CreateActionRequired :one
INSERT INTO action_required (
  notes,
  call_id,
  action_catalog_id
) VALUES (
  $1, $2, $3
) RETURNING id, call_id, action_catalog_id, notes
`

type CreateActionRequiredParams struct {
	Notes           sql.NullString `json:"notes"`
	CallID          sql.NullInt64  `json:"call_id"`
	ActionCatalogID sql.NullInt64  `json:"action_catalog_id"`
}

func (q *Queries) CreateActionRequired(ctx context.Context, arg CreateActionRequiredParams) (ActionRequired, error) {
	row := q.db.QueryRowContext(ctx, createActionRequired, arg.Notes, arg.CallID, arg.ActionCatalogID)
	var i ActionRequired
	err := row.Scan(
		&i.ID,
		&i.CallID,
		&i.ActionCatalogID,
		&i.Notes,
	)
	return i, err
}

const deleteActionRequired = `-- name: DeleteActionRequired :exec
DELETE FROM action_required WHERE id =$1
`

func (q *Queries) DeleteActionRequired(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteActionRequired, id)
	return err
}

const listActionRequired = `-- name: ListActionRequired :many
SELECT id, call_id, action_catalog_id, notes FROM action_required
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListActionRequiredParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListActionRequired(ctx context.Context, arg ListActionRequiredParams) ([]ActionRequired, error) {
	rows, err := q.db.QueryContext(ctx, listActionRequired, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ActionRequired{}
	for rows.Next() {
		var i ActionRequired
		if err := rows.Scan(
			&i.ID,
			&i.CallID,
			&i.ActionCatalogID,
			&i.Notes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

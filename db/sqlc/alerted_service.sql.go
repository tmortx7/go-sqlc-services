// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: alerted_service.sql

package db

import (
	"context"
	"database/sql"
)

const createAlertedService = `-- name: CreateAlertedService :one
INSERT INTO alerted_service (
  action_required_id,
  emergency_service_id
) VALUES (
  $1, $2
) RETURNING id, action_required_id, emergency_service_id
`

type CreateAlertedServiceParams struct {
	ActionRequiredID   sql.NullInt64 `json:"action_required_id"`
	EmergencyServiceID sql.NullInt64 `json:"emergency_service_id"`
}

func (q *Queries) CreateAlertedService(ctx context.Context, arg CreateAlertedServiceParams) (AlertedService, error) {
	row := q.db.QueryRowContext(ctx, createAlertedService, arg.ActionRequiredID, arg.EmergencyServiceID)
	var i AlertedService
	err := row.Scan(&i.ID, &i.ActionRequiredID, &i.EmergencyServiceID)
	return i, err
}

const deleteAlertedService = `-- name: DeleteAlertedService :exec
DELETE FROM alerted_service WHERE id =$1
`

func (q *Queries) DeleteAlertedService(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAlertedService, id)
	return err
}

const listAlertedService = `-- name: ListAlertedService :many
SELECT id, action_required_id, emergency_service_id FROM alerted_service
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListAlertedServiceParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAlertedService(ctx context.Context, arg ListAlertedServiceParams) ([]AlertedService, error) {
	rows, err := q.db.QueryContext(ctx, listAlertedService, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AlertedService{}
	for rows.Next() {
		var i AlertedService
		if err := rows.Scan(&i.ID, &i.ActionRequiredID, &i.EmergencyServiceID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

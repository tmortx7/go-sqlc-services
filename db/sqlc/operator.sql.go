// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: operator.sql

package db

import (
	"context"
	"database/sql"
)

const createOperator = `-- name: CreateOperator :one
INSERT INTO operator (
  operator_code,
  operator
) VALUES (
  $1, $2
) RETURNING id, operator_code, operator, created_at
`

type CreateOperatorParams struct {
	OperatorCode sql.NullString `json:"operator_code"`
	Operator     string         `json:"operator"`
}

func (q *Queries) CreateOperator(ctx context.Context, arg CreateOperatorParams) (Operator, error) {
	row := q.db.QueryRowContext(ctx, createOperator, arg.OperatorCode, arg.Operator)
	var i Operator
	err := row.Scan(
		&i.ID,
		&i.OperatorCode,
		&i.Operator,
		&i.CreatedAt,
	)
	return i, err
}

const deleteOperator = `-- name: DeleteOperator :exec
DELETE FROM operator WHERE id =$1
`

func (q *Queries) DeleteOperator(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteOperator, id)
	return err
}

const listOperator = `-- name: ListOperator :many
SELECT id, operator_code, operator, created_at FROM operator
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListOperatorParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOperator(ctx context.Context, arg ListOperatorParams) ([]Operator, error) {
	rows, err := q.db.QueryContext(ctx, listOperator, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Operator{}
	for rows.Next() {
		var i Operator
		if err := rows.Scan(
			&i.ID,
			&i.OperatorCode,
			&i.Operator,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: call.sql

package db

import (
	"context"
	"database/sql"
)

const createCall = `-- name: CreateCall :one
INSERT INTO call (
  operator_id,
  phone_number_id,
  city_id,
  notes
) VALUES (
  $1, $2, $3, $4
) RETURNING id, operator_id, phone_number_id, city_id, notes, created_at
`

type CreateCallParams struct {
	OperatorID    sql.NullInt64 `json:"operator_id"`
	PhoneNumberID sql.NullInt64 `json:"phone_number_id"`
	CityID        sql.NullInt64 `json:"city_id"`
	Notes         string        `json:"notes"`
}

func (q *Queries) CreateCall(ctx context.Context, arg CreateCallParams) (Call, error) {
	row := q.db.QueryRowContext(ctx, createCall,
		arg.OperatorID,
		arg.PhoneNumberID,
		arg.CityID,
		arg.Notes,
	)
	var i Call
	err := row.Scan(
		&i.ID,
		&i.OperatorID,
		&i.PhoneNumberID,
		&i.CityID,
		&i.Notes,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCall = `-- name: DeleteCall :exec
DELETE FROM call WHERE id =$1
`

func (q *Queries) DeleteCall(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCall, id)
	return err
}

const listCall = `-- name: ListCall :many
SELECT id, operator_id, phone_number_id, city_id, notes, created_at FROM call
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListCallParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCall(ctx context.Context, arg ListCallParams) ([]Call, error) {
	rows, err := q.db.QueryContext(ctx, listCall, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Call{}
	for rows.Next() {
		var i Call
		if err := rows.Scan(
			&i.ID,
			&i.OperatorID,
			&i.PhoneNumberID,
			&i.CityID,
			&i.Notes,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

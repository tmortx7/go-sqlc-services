// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: action_catalog.sql

package db

import (
	"context"
)

const createActionCatalog = `-- name: CreateActionCatalog :one
INSERT INTO action_catalog (
  action_name
) VALUES (
  $1
) RETURNING id, action_name, created_at
`

func (q *Queries) CreateActionCatalog(ctx context.Context, actionName string) (ActionCatalog, error) {
	row := q.db.QueryRowContext(ctx, createActionCatalog, actionName)
	var i ActionCatalog
	err := row.Scan(&i.ID, &i.ActionName, &i.CreatedAt)
	return i, err
}

const deleteActionCatalog = `-- name: DeleteActionCatalog :exec
DELETE FROM action_catalog WHERE id =$1
`

func (q *Queries) DeleteActionCatalog(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteActionCatalog, id)
	return err
}

const listActionCatalog = `-- name: ListActionCatalog :many
SELECT id, action_name, created_at FROM action_catalog
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListActionCatalogParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListActionCatalog(ctx context.Context, arg ListActionCatalogParams) ([]ActionCatalog, error) {
	rows, err := q.db.QueryContext(ctx, listActionCatalog, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ActionCatalog{}
	for rows.Next() {
		var i ActionCatalog
		if err := rows.Scan(&i.ID, &i.ActionName, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateActionCatalog = `-- name: UpdateActionCatalog :one
UPDATE action_catalog
SET action_name = $2
WHERE id = $1
RETURNING id, action_name, created_at
`

type UpdateActionCatalogParams struct {
	ID         int64  `json:"id"`
	ActionName string `json:"action_name"`
}

func (q *Queries) UpdateActionCatalog(ctx context.Context, arg UpdateActionCatalogParams) (ActionCatalog, error) {
	row := q.db.QueryRowContext(ctx, updateActionCatalog, arg.ID, arg.ActionName)
	var i ActionCatalog
	err := row.Scan(&i.ID, &i.ActionName, &i.CreatedAt)
	return i, err
}

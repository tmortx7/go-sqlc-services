// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: alert_service.sql

package db

import (
	"context"
	"database/sql"
)

const createAlertService = `-- name: CreateAlertService :one
INSERT INTO alert_service (
  action_catalog_id,
  emergency_service_id,
  always_alert
) VALUES (
  $1, $2, $3
) RETURNING id, action_catalog_id, emergency_service_id, always_alert
`

type CreateAlertServiceParams struct {
	ActionCatalogID    sql.NullInt64 `json:"action_catalog_id"`
	EmergencyServiceID sql.NullInt64 `json:"emergency_service_id"`
	AlwaysAlert        sql.NullBool  `json:"always_alert"`
}

func (q *Queries) CreateAlertService(ctx context.Context, arg CreateAlertServiceParams) (AlertService, error) {
	row := q.db.QueryRowContext(ctx, createAlertService, arg.ActionCatalogID, arg.EmergencyServiceID, arg.AlwaysAlert)
	var i AlertService
	err := row.Scan(
		&i.ID,
		&i.ActionCatalogID,
		&i.EmergencyServiceID,
		&i.AlwaysAlert,
	)
	return i, err
}

const deleteAlertService = `-- name: DeleteAlertService :exec
DELETE FROM alert_service WHERE id =$1
`

func (q *Queries) DeleteAlertService(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAlertService, id)
	return err
}

const listAlertService = `-- name: ListAlertService :many
SELECT id, action_catalog_id, emergency_service_id, always_alert FROM alert_service
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListAlertServiceParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAlertService(ctx context.Context, arg ListAlertServiceParams) ([]AlertService, error) {
	rows, err := q.db.QueryContext(ctx, listAlertService, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AlertService{}
	for rows.Next() {
		var i AlertService
		if err := rows.Scan(
			&i.ID,
			&i.ActionCatalogID,
			&i.EmergencyServiceID,
			&i.AlwaysAlert,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

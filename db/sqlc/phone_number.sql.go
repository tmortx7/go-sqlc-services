// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: phone_number.sql

package db

import (
	"context"
	"database/sql"
)

const createPhoneNumber = `-- name: CreatePhoneNumber :one
INSERT INTO phone_number (
  phone_number,
  notes
) VALUES (
  $1, $2
) RETURNING id, phone_number, notes, created_at
`

type CreatePhoneNumberParams struct {
	PhoneNumber string         `json:"phone_number"`
	Notes       sql.NullString `json:"notes"`
}

func (q *Queries) CreatePhoneNumber(ctx context.Context, arg CreatePhoneNumberParams) (PhoneNumber, error) {
	row := q.db.QueryRowContext(ctx, createPhoneNumber, arg.PhoneNumber, arg.Notes)
	var i PhoneNumber
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.Notes,
		&i.CreatedAt,
	)
	return i, err
}

const deletePhoneNumber = `-- name: DeletePhoneNumber :exec
DELETE FROM phone_number WHERE id =$1
`

func (q *Queries) DeletePhoneNumber(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePhoneNumber, id)
	return err
}

const listPhoneNumber = `-- name: ListPhoneNumber :many
SELECT id, phone_number, notes, created_at FROM phone_number
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListPhoneNumberParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPhoneNumber(ctx context.Context, arg ListPhoneNumberParams) ([]PhoneNumber, error) {
	rows, err := q.db.QueryContext(ctx, listPhoneNumber, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PhoneNumber{}
	for rows.Next() {
		var i PhoneNumber
		if err := rows.Scan(
			&i.ID,
			&i.PhoneNumber,
			&i.Notes,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
